meta:
  deck:
    ja: "SDI 分散システム"
    en: "SDI Distributed Systems"
  lang: "ja"
cards:
  - id: cap
    term:
      ja: "CAP定理"
      en: "CAP Theorem"
    definition: "CAP定理は、分散下ではC/A/P同時達成不可という定理です。"
    explanation: "CAP定理は、分散データストアが以下の3つの保証を同時に提供することはできないという原理です。C (Consistency): 全てのノードが常に同じデータを返すこと。A (Availability): 全ての（障害中でない）ノードが常にリクエストに応答すること。P (Partition Tolerance): ネットワーク分断が発生してもシステム全体が動作を継続すること。分散システムはPを前提とするため、分断時にCとAのどちらを優先するか（CP or AP）の選択を迫られます。この定理は、分散システム設計における基本的なトレードオフを示しています。"
    tags: [distributed]
    notes:
      - "RDBの多くはCA、NoSQLの多くはAPを選択する傾向がある"
      - "Pは分散システムでは避けられないため、実質的にはCとAのどちらを優先するかの選択となる"
      - "厳密な意味でのCAP定理の適用は難しいという議論もある（例: BASE原則）"
      - "ネットワーク分断時でもシステムが動作し続けることをPartition Toleranceと呼ぶ"

  - id: pacelc
    term:
      ja: "PACELC定理"
      en: "PACELC Theorem"
    definition: "PACELC定理は、分断時はCAP、平常時はLatencyとConsistencyのトレードオフという定理です。"
    explanation: "PACELC定理はCAP定理を拡張したものです。ネットワーク分断（Partition）が発生した場合は、AvailabilityとConsistencyのトレードオフ（A or C）がある。そうでなければ（Else）、平常時はLatencyとConsistencyのトレードオフ（L or C）がある、と主張します。例えば、書き込みを多くのノードに同期的にレプリケーションすれば一貫性（C）は高まるが、レイテンシ（L）は悪化します。この定理は、分散システム設計において、より現実的なトレードオフを考慮する上で役立ちます。"
    tags: [distributed]
    notes:
      - "DynamoDBはAP/LC、CassandraはAP/LC、SpannerはCP/Cと分類される"
      - "平常時（Pがない場合）でも、レイテンシと一貫性の間にトレードオフが存在することを示す"
      - "システム設計者は、これらのトレードオフを理解し、ユースケースに最適な選択を行う必要がある"
      - "CAP定理の限界を補完する概念として提唱された"

  - id: replication
    term:
      ja: "レプリケーション"
      en: "Replication"
    definition: "レプリケーションは、データ複製で冗長化する仕組みです。"
    explanation: "レプリケーションは、同じデータを複数の場所に複製して保持することです。主な目的は、可用性（一つのノードが故障してもサービスを継続）と、読み取り性能の向上（複数のレプリカに読み取りリクエストを分散）です。プライマリからレプリカへのデータコピーを同期的（書き込みの完了を待つ）に行うか、非同期的（待たない）に行うかで、一貫性とパフォーマンスのトレードオフが変わります。データベース、ファイルシステム、キャッシュなど、様々なシステムでデータの冗長性と可用性を高めるために利用されます。"
    tags: [reliability]
    notes:
      - "地理的に離れた場所に複製することをジオレプリケーションという"
      - "同期レプリケーションは一貫性を保証するが、レイテンシが増加する"
      - "非同期レプリケーションはレイテンシが低いが、データ損失のリスクがある"
      - "読み取りレプリカは、読み取り負荷を分散し、プライマリの負荷を軽減する"

  - id: sharding
    term:
      ja: "シャーディング (水平パーティショニング)"
      en: "Sharding (Horizontal Partitioning)"
    definition: "シャーディングは、データをキーで分割して複数ノードに配置する仕組みです。"
    explanation: "シャーディングは、巨大なデータセットをシャードと呼ばれる小さな単位に分割し、複数のデータベースサーバーに分散させる手法です。これにより、1台のサーバーでは扱いきれないほどのデータ量や書き込み負荷をスケールアウトさせることができます。シャードキーの設計が非常に重要で、キーの選択が悪いと特定シャードにアクセスが集中する「ホットスポット」問題が発生します。大規模なデータセットや高スループットが求められるシステムで、スケーラビリティを確保するために広く用いられます。"
    tags: [db, distributed]
    notes:
      - "垂直パーティショニングは、テーブルの列を分割すること"
      - "シャードキーの選択がパフォーマンスと運用に大きく影響する"
      - "データ再配置（リシャーディング）は複雑な運用作業となる"
      - "アプリケーション側でシャードの場所を管理するロジックが必要になる場合がある"

  - id: leader-follower
    term:
      ja: "Leader/Follower"
      en: "Leader/Follower"
    definition: "Leader/Followerは、書き込みはリーダーで直列、読み取りはフォロワーでスケールする構成です。"
    explanation: "Leader/Followerは、レプリケーション構成の一種です。全ての書き込みリクエストは単一のLeaderノードが処理し、その変更履歴（ログ）を複数のFollowerノードに複製します。読み取りリクエストはFollowerノードに分散させることができるため、読み取り負荷をスケールアウトさせやすいのが特徴です。Leaderがダウンした場合は、Followerの中から新しいLeaderを選出するフェイルオーバーが行われます。データベース、メッセージキュー、分散ファイルシステムなど、様々な分散システムで利用される一般的なパターンです。"
    tags: [db, distributed]
    notes:
      - "プライマリ/レプリカ、マスター/スレーブとも呼ばれる"
      - "書き込みはLeaderに集中するため、Leaderがボトルネックになる可能性がある"
      - "Followerは読み取りスケールアウトに貢献"
      - "フェイルオーバー時のデータ損失や可用性の問題が考慮事項となる"

  - id: raft
    term:
      ja: "Raft（合意アルゴリズム）"
      en: "Raft (Consensus Algorithm)"
    definition: "Raftは、分散合意アルゴリズムです。"
    explanation: "Raftは、分散システムにおいて、複数のノードが状態について一つの合意を形成するためのアルゴリズムです。主に、どのノードがLeaderであるか、そしてレプリケートされたログがどのような順序であるべきかを決定するために使用されます。理解しやすさを重視して設計されており、Paxosという先行するアルゴリズムよりも実装が容易であるとされています。etcdやConsulなどで利用されています。分散システムの信頼性と一貫性を確保するための重要な基盤技術です。"
    tags: [distributed]
    notes:
      - "Leader Election, Log Replication, Safetyの3つの主要な部分から構成される"
      - "Paxosよりも理解しやすく、実装しやすいことを目指して設計された"
      - "分散システムのステートマシンレプリケーションに利用される"
      - "etcd, Consul, TiKVなど、多くのプロダクトで採用されている"
    url:
      - "https://raft.github.io/"

  - id: truetime
    term:
      ja: "TrueTime"
      en: "TrueTime"
    definition: "TrueTimeは、Spannerの誤差付き時計APIです。"
    explanation: "TrueTimeは、Googleのデータセンターの原子時計とGPS受信機を利用して、全サーバーに高精度な時刻を提供するAPIです。単一の時刻ではなく、起こりうる誤差を含んだ時刻の範囲 `[earliest, latest]` を返します。Cloud Spannerは、この時刻の範囲を利用してトランザクションのタイムスタンプが重複しないことを保証し、それによってグローバルに一貫性のあるトランザクション順序を決定しています。これにより、地理的に分散した環境でも強整合性のあるトランザクションを実現しています。"
    tags: [gcp, distributed]
    notes:
      - "「Commit Wait」という仕組みで、前のトランザクションの時刻範囲を確実に過ぎるまで待機する"
      - "物理的な時間と論理的な時間を組み合わせたハイブリッド論理時計"
      - "グローバルなトランザクションの一貫性を保証するSpannerの基盤技術"
      - "原子時計とGPS受信機により、非常に高い精度で時刻同期を行う"
    url:
      - "https://research.google.com/pubs/pub45855/"

  - id: consistency-models
    term:
      ja: "一貫性モデル"
      en: "Consistency Models"
    definition: "一貫性モデルは、分散システムにおいて、データが複数のノード間でどのように同期され、読み取られるかを定義するルールです。"
    explanation: "一貫性モデルは、分散システムにおいて、データが複数のノード間でどのように同期され、読み取られるかを定義するルールです。最も厳密なのは強一貫性（Strong Consistency）で、常に最新のデータが読み取れることを保証しますが、レイテンシが増加し、可用性が低下する可能性があります。最終一貫性（Eventual Consistency）は、ある時点では古いデータが読み取られる可能性があるものの、最終的には全てのレプリカが同じ状態になることを保証します。その他にも、因果一貫性、読み取り一貫性など様々なモデルがあり、システムの要件に応じて適切なモデルを選択する必要があります。"
    tags: [distributed, consistency, database]
    notes:
      - "強一貫性（Strong Consistency）: 常に最新のデータが読み取れる"
      - "最終一貫性（Eventual Consistency）: 時間が経てば全てのレプリカが同じ状態になる"
      - "因果一貫性（Causal Consistency）: 因果関係のある操作の順序を保証"
      - "読み取り一貫性（Read Consistency）: 読み取り操作の一貫性を保証"
    url:
      - "https://en.wikipedia.org/wiki/Consistency_model"

  - id: distributed-lock
    term:
      ja: "分散ロック"
      en: "Distributed Lock"
    definition: "分散ロックは、複数のプロセスやサーバーが共有リソースに同時にアクセスするのを制御するための仕組みです。"
    explanation: "分散ロックは、複数のプロセスやサーバーが共有リソース（データベースのレコード、ファイル、外部APIなど）に同時にアクセスするのを制御するための仕組みです。分散システムにおいて、競合状態（Race Condition）を防ぎ、データの一貫性を保つために不可欠です。単一のサーバー内でのロックとは異なり、ネットワークの遅延、ノードの障害、クロックのずれなど、分散システム特有の課題を考慮して設計する必要があります。代表的な実装には、ZooKeeperやRedis、Etcdなどがあります。"
    tags: [distributed, concurrency, reliability]
    notes:
      - "共有リソースへの排他的アクセスを保証"
      - "デッドロックやライブロックの発生に注意が必要"
      - "リーダー選出や合意アルゴリズムと関連が深い"
      - "代表的な実装例: Apache ZooKeeper, Redis (Redlock), Etcd"
    url:
      - "https://en.wikipedia.org/wiki/Distributed_lock"

  - id: quorum
    term:
      ja: "Quorum (定足数)"
      en: "Quorum"
    definition: "分散システムにおいて、操作が成功したとみなすために必要な、応答を得るべき最小サーバー数のことです。"
    explanation: "Quorumは、データのレプリカを持つノード群において、書き込みや読み込み操作の一貫性を保証するために用いられます。例えば、Nをレプリカの総数、Wを書き込み成功に必要なノード数（書き込みクォーラム）、Rを読み込み成功に必要なノード数（読み込みクォーラム）とします。このとき `W + R > N` という条件を満たすように設定することで、読み込みと書き込みの操作が必ず少なくとも1つの共通ノードを介して行われることになり、最新のデータが読み取れることを保証できます（強一貫性）。"
    tags: [distributed, consistency, reliability]
    notes:
      - "`W + R > N` を満たすことで、読み取りと書き込みの重複が保証される"
      - "W=N, R=1 にすると、書き込みは遅いが読み込みは高速になる（読み取り最適化）"
      - "W=1, R=N にすると、書き込みは高速だが読み込みは遅くなる（書き込み最適化）"
      - "W=Q, R=Q, Q=(N+1)/2 のような設定が一般的（バランス型）"
    url:
      - "https://en.wikipedia.org/wiki/Quorum_(distributed_computing)"

  - id: gossip-protocol
    term:
      ja: "ゴシッププロトコル"
      en: "Gossip Protocol"
    definition: "各ノードが近隣ノードと情報を交換し、その情報が噂のようにシステム全体に伝播していく、P2Pベースの通信プロトコルです。"
    explanation: "ゴシッププロトコルは、分散システムにおいて、スケーラブルで耐障害性の高い情報伝播を実現するために使用されます。各ノードは、自分が知っている情報をランダムに選んだ少数の他のノード（ピア）と定期的に交換します。このプロセスを繰り返すことで、情報は疫病の感染のように指数関数的にシステム全体に広がっていきます。中央集権的な管理サーバーが不要で、ノードの追加や離脱に動的に対応できるため、大規模な分散システムでのメンバーシップ管理、障害検出、データ同期などに利用されます。"
    tags: [distributed, algorithm, p2p]
    notes:
      - "スケーラビリティと耐障害性に優れる"
      - "最終的な一貫性（Eventual Consistency）を提供する"
      - "メッセージが全ノードに伝播するまでの遅延がある"
      - "代表例: Cassandraのノード間通信、Consulのメンバーシップ管理"
    url:
      - "https://en.wikipedia.org/wiki/Gossip_protocol"

  - id: service-discovery
    term:
      ja: "サービスディスカバリー"
      en: "Service Discovery"
    definition: "マイクロサービスアーキテクチャにおいて、各サービスが他のサービスのネットワーク上の場所（IPアドレスとポート）を動的に見つけるための仕組みです。"
    explanation: "クラウド環境では、スケーリングや障害対応のためにサービスのインスタンスが頻繁に追加・削除され、IPアドレスは常に変動します。サービスディスカバリーは、このような動的な環境において、サービス間の通信を可能にするための重要なコンポーネントです。サービスは起動時に自身の場所を「サービスレジストリ」に登録し、他のサービスを呼び出す際にはレジストリに問い合わせて現在の場所を取得します。これにより、設定ファイルなどにIPアドレスをハードコーディングする必要がなくなります。"
    tags: [distributed, microservices, architecture, reliability]
    notes:
      - "クライアントサイドディスカバリーとサーバーサイドディスカバリーの2つの主要なパターンがある"
      - "サービスレジストリ（例: Consul, etcd, ZooKeeper）が中心的な役割を担う"
      - "ヘルスチェックと連携し、異常なインスタンスを自動的に登録から除外する"
      - "Kubernetesなどのコンテナオーケストレーションシステムには、サービスディスカバリー機能が組み込まれている"
    url:
      - "https://microservices.io/patterns/service-discovery.html"
