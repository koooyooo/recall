meta:
  deck:
    ja: "SDI メッセージング"
    en: "SDI Messaging"
  lang: "ja"
cards:
  - id: message-queue
    term:
      ja: "メッセージキュー"
      en: "Message Queue"
    definition: "メッセージキューは、非同期処理やサービス間の疎結合を実現するための、メッセージを一時的に保存する仕組みです。"
    explanation: |
      メッセージキューは、アプリケーションの異なるコンポーネントやサービス間でデータを非同期にやり取りするためのバッファとして機能します。
      送信側（プロデューサー）はメッセージをキューに送信し、受信側（コンシューマー）はキューからメッセージを読み取って処理します。
      これにより、送信側と受信側が直接通信することなく、互いに独立して動作できるようになり、
      システムの可用性、スケーラビリティ、耐障害性が向上します。
      バックグラウンド処理、タスクのオフロード、マイクロサービス間の通信などに広く利用されます。
    tags: [messaging, asynchronous, distributed]
    notes:
      - "プロデューサーとコンシューマーの疎結合を実現"
      - "非同期処理により、システムの応答性を向上"
      - "一時的な負荷スパイクを吸収し、システムの安定性を高める"
      - "代表的な実装例: Apache Kafka, RabbitMQ, Amazon SQS, Google Cloud Pub/Sub"
    url:
      - "https://en.wikipedia.org/wiki/Message_queue"

  - id: distributed-transactions
    term:
      ja: "分散トランザクション"
      en: "Distributed Transactions (2PC/Saga)"
    definition: "分散トランザクションは、複数の独立したシステムやデータベースにまたがる操作の一貫性を保証する仕組みです。"
    explanation: |
      分散トランザクションは、複数の異なるデータベースやサービスにまたがる一連の操作が、
      全体としてアトミック（不可分）に実行されることを保証する仕組みです。
      従来のモノリシックなシステムでは単一のトランザクションで処理できましたが、
      マイクロサービスアーキテクチャなど分散システムでは複雑になります。
      代表的なパターンとして、厳密なアトミック性を保証する二相コミット（2PC）と、
      補償トランザクションを用いて最終的な一貫性を実現するSagaパターンがあります。
      2PCはシンプルですが可用性に課題があり、Sagaは複雑ですが可用性が高いというトレードオフがあります。
    tags: [distributed, transactions, consistency]
    notes:
      - "二相コミット（2PC）は厳密なアトミック性を保証するが、コーディネーターの障害でシステムがブロックされる可能性がある（ブロッキング問題）"
      - "Sagaパターンは、一連のローカルトランザクションと補償トランザクションで構成され、最終的な一貫性を実現する"
      - "マイクロサービスアーキテクチャにおけるデータ一貫性維持の課題を解決する"
      - "イベントソーシングと組み合わせることで、Sagaの実装が容易になる場合がある"
    url:
      - "https://en.wikipedia.org/wiki/Distributed_transaction"
      - "https://microservices.io/patterns/data/saga.html"

  - id: pub-sub
    term:
      ja: "Publish/Subscribe (Pub/Sub) パターン"
      en: "Publish/Subscribe (Pub/Sub) Pattern"
    definition: "メッセージの送信者（Publisher）が、特定の受信者（Subscriber）を意識することなく、トピックと呼ばれるチャネルにメッセージを送信する非同期メッセージングパターンです。"
    explanation: |
      Pub/Subモデルでは、PublisherとSubscriberはトピックを介して疎結合に接続されます。
      Publisherはトピックにメッセージを公開し、そのトピックを購読している全てのSubscriberがメッセージのコピーを受け取ります。
      これにより、1対多のブロードキャスト通信や、複数のコンポーネントが同じイベントに反応するシステムを容易に構築できます。
      メッセージキューが1対1の通信を基本とするのに対し、Pub/Subは1対多の通信を基本とします。
    tags: [messaging, architecture, distributed]
    notes:
      - "PublisherとSubscriberが互いを知る必要がなく、高度な疎結合を実現する"
      - "1つのメッセージを複数の受信者に配信するのに適している"
      - "イベント駆動型アーキテクチャの中核的なパターン"
      - "代表例: Apache Kafka, Google Cloud Pub/Sub, Redis Pub/Sub"
    url:
      - "https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern"

  - id: delivery-guarantees
    term:
      ja: "メッセージ配信保証"
    en: "Message Delivery Guarantees"
    definition: "メッセージングシステムがメッセージをどの程度確実に配信するかを定義する保証レベルです。"
    explanation: |
      メッセージングシステムにおける配信保証は、主に3つのレベルに分類されます。
      - At most once (最大1回): 各メッセージは最大で1回配信されます。
        ネットワーク障害などでメッセージが失われる可能性がありますが、重複はありません。
      - At least once (最低1回): 各メッセージは最低でも1回は配信されることが保証されます。
        メッセージが失われることはありませんが、リトライなどにより同じメッセージが複数回配信される可能性があります。
      - Exactly once (正確に1回): 各メッセージが正確に1回だけ配信されることを保証します。
        最も理想的ですが、実現するためのコストや複雑性が高くなります。
    tags: [messaging, reliability, distributed]
    notes:
      - "どの保証レベルが必要かは、アプリケーションの要件によって決まる（例: 決済処理ではExactly-onceが求められる）"
      - "At-least-once を実現するには、受信側での確認応答（ACK）と送信側でのリトライが必要"
      - "Exactly-once を実現するには、At-least-onceに加えて、受信側で重複排除の仕組みが必要"
    url:
      - "https://aws.amazon.com/blogs/compute/understanding-messaging-guarantees-in-event-driven-architectures/"

  - id: dead-letter-queue
    term:
      ja: "デッドレターキュー (DLQ)"
      en: "Dead Letter Queue (DLQ)"
    definition: "処理に失敗したメッセージを転送し、隔離するための専用のキューです。"
    explanation: |
      メッセージングシステムにおいて、コンシューマーが何らかの理由（バグ、データ破損、依存サービス障害など）で
      メッセージを正常に処理できない場合、メッセージがキューに溜まり続けたり、無限にリトライされたりする問題が発生します。
      デッドレターキューは、このような処理不能なメッセージをメインのキューから隔離するための仕組みです。
      処理失敗回数が閾値を超えたメッセージをDLQに転送することで、メインのキューの流れを止めずに、
      問題のメッセージを後から開発者が調査・分析・再処理することが可能になります。
    tags: [messaging, reliability, architecture]
    notes:
      - "正常なメッセージ処理の妨げになる「ポイズンピル」メッセージを隔離する"
      - "障害調査やデバッグ、手動でのデータ復旧に役立つ"
      - "DLQに転送されたメッセージには、アラートを設定して監視することが重要"
      - "Amazon SQS, Google Cloud Pub/Sub, RabbitMQなど多くのメッセージングサービスがサポートしている"
    url:
      - "https://aws.amazon.com/sqs/features/dead-letter-queues/"