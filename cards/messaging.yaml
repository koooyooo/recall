meta:
  deck:
    ja: "SDI メッセージング"
    en: "SDI Messaging"
  lang: "ja"
cards:
  - id: message-queue
    term:
      ja: "メッセージキュー"
      en: "Message Queue"
    definition: "メッセージキューは、非同期処理やサービス間の疎結合を実現するための、メッセージを一時的に保存する仕組みです。"
    explanation: "メッセージキューは、アプリケーションの異なるコンポーネントやサービス間でデータを非同期にやり取りするためのバッファとして機能します。送信側（プロデューサー）はメッセージをキューに送信し、受信側（コンシューマー）はキューからメッセージを読み取って処理します。これにより、送信側と受信側が直接通信することなく、互いに独立して動作できるようになり、システムの可用性、スケーラビリティ、耐障害性が向上します。バックグラウンド処理、タスクのオフロード、マイクロサービス間の通信などに広く利用されます。"
    tags: [messaging, asynchronous, distributed]
    notes:
      - "プロデューサーとコンシューマーの疎結合を実現"
      - "非同期処理により、システムの応答性を向上"
      - "一時的な負荷スパイクを吸収し、システムの安定性を高める"
      - "代表的な実装例: Apache Kafka, RabbitMQ, Amazon SQS, Google Cloud Pub/Sub"
    url:
      - "https://en.wikipedia.org/wiki/Message_queue"

  - id: distributed-transactions
    term:
      ja: "分散トランザクション"
      en: "Distributed Transactions (2PC/Saga)"
    definition: "分散トランザクションは、複数の独立したシステムやデータベースにまたがる操作の一貫性を保証する仕組みです。"
    explanation: "分散トランザクションは、複数の異なるデータベースやサービスにまたがる一連の操作が、全体としてアトミック（不可分）に実行されることを保証する仕組みです。従来のモノリシックなシステムでは単一のトランザクションで処理できましたが、マイクロサービスアーキテクチャなど分散システムでは複雑になります。代表的なパターンとして、厳密なアトミック性を保証する二相コミット（2PC）と、補償トランザクションを用いて最終的な一貫性を実現するSagaパターンがあります。2PCはシンプルですが可用性に課題があり、Sagaは複雑ですが可用性が高いというトレードオフがあります。"
    tags: [distributed, transactions, consistency]
    notes:
      - "二相コミット（2PC）は厳密なアトミック性を保証するが、コーディネーターの障害でシステムがブロックされる可能性がある（ブロッキング問題）"
      - "Sagaパターンは、一連のローカルトランザクションと補償トランザクションで構成され、最終的な一貫性を実現する"
      - "マイクロサービスアーキテクチャにおけるデータ一貫性維持の課題を解決する"
      - "イベントソーシングと組み合わせることで、Sagaの実装が容易になる場合がある"
    url:
      - "https://en.wikipedia.org/wiki/Distributed_transaction"
      - "https://microservices.io/patterns/data/saga.html"
