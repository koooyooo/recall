meta:
  deck:
    ja: "SDI アーキテクチャ"
    en: "SDI Architecture"
  lang: "ja"
cards:
  - id: microservices
    term:
      ja: "マイクロサービスアーキテクチャ"
      en: "Microservices Architecture"
    definition: "マイクロサービスアーキテクチャは、単一のアプリケーションを、独立してデプロイ可能な小さなサービス群として構築するアプローチです。"
    explanation: |
      マイクロサービスアーキテクチャは、単一のアプリケーションを、それぞれが特定のビジネス機能に焦点を当てた、
      独立してデプロイ可能な小さなサービス群として構築するアプローチです。
      各サービスは独自のデータストアを持つことができ、異なる技術スタックを使用することも可能です。
      これにより、開発の俊敏性、スケーラビリティ、耐障害性が向上しますが、
      サービス間の通信、データ一貫性、分散トレーシングなどの複雑性が増します。
      DevOps文化やCI/CDパイプラインとの相性が良いとされています。
    tags: [architecture, microservices, distributed]
    notes:
      - "独立したデプロイ、スケーリング、開発が可能"
      - "技術スタックの選択肢が広がる"
      - "サービス間の通信、データ一貫性、運用監視が複雑になる"
      - "障害の影響範囲を限定できる（耐障害性）"
    url:
      - "https://microservices.io/"

  - id: monolithic
    term:
      ja: "モノリシックアーキテクチャ"
      en: "Monolithic Architecture"
    definition: "モノリシックアーキテクチャは、アプリケーションの全てのコンポーネントが単一のユニットとして構築され、デプロイされるアーキテクチャです。"
    explanation: |
      モノリシックアーキテクチャは、アプリケーションの全てのコンポーネント（UI、ビジネスロジック、データアクセス層など）が
      単一のコードベースに統合され、単一のユニットとして構築・デプロイされる伝統的なアプローチです。
      開発初期段階ではシンプルで管理しやすいという利点がありますが、
      アプリケーションが大規模になるにつれて、コードベースの複雑化、開発速度の低下、
      スケーラビリティの限界、技術スタックの固定化などの課題が生じやすくなります。
      小規模なアプリケーションや、開発チームが小さい場合に適しています。
    tags: [architecture, monolithic]
    notes:
      - "開発初期はシンプルで管理しやすい"
      - "アプリケーションが大規模になると、開発、デプロイ、スケーリングが困難になる"
      - "技術スタックの変更が難しい"
      - "障害発生時にアプリケーション全体が影響を受ける可能性がある"
    url:
      - "https://en.wikipedia.org/wiki/Monolithic_application"

  - id: modular-monolith
    term:
      ja: "モジュラーモノリス"
      en: "Modular Monolith"
    definition: "モノリシックなデプロイ単位を維持しつつ、内部構造を明確に定義されたモジュール群に分割したアーキテクチャです。"
    explanation: |
      モジュラーモノリスは、モノリシックアーキテクチャとマイクロサービスアーキテクチャの間に位置するアプローチです。
      アプリケーション全体は単一のプロセスとしてデプロイされますが、
      コードベースはビジネスドメインに基づいて論理的に分割されたモジュールで構成されます。
      各モジュールは高い凝集度と低い結合度を目指し、モジュール間のやり取りは明確に定義されたAPIを介して行われます。
      これにより、モノリスの運用のシンプルさを維持しつつ、マイクロサービスのようなコードの整理、
      理解しやすさ、変更の容易さを実現します。
      将来的に特定のモジュールをマイクロサービスとして切り出す際の前段階としても有効です。
    tags: [architecture, monolithic]
    notes:
      - "単一のデプロイ単位による運用のシンプルさ"
      - "モジュール間の結合度が低く、コードの見通しが良い"
      - "マイクロサービスへの移行が比較的容易"
      - "モジュール間の境界を厳密に保つ規律が必要"
    url:
      - "https://www.infoq.com/articles/modular-monolith-discover-components/"
