meta:
  deck:
    ja: "SDI データベース"
    en: "SDI Databases"
  lang: "ja"
cards:
  - id: acid
    term:
      ja: "ACID特性"
      en: "ACID Properties"
    definition: "トランザクションが持つべきとされる4つの特性（原子性、一貫性、独立性、永続性）の頭文字を取ったものです。"
    explanation: |
      ACIDは、データベースのトランザクション処理において、データの正確性と信頼性を保証するための基本的な概念です。
      - Atomicity (原子性): トランザクション内の全ての操作が完全に実行されるか、全く実行されないかのどちらかであることを保証します。
      - Consistency (一貫性): トランザクションの前後で、データベースの状態が予め定められたルール（制約）を満たし続けることを保証します。
      - Isolation (独立性): 複数のトランザクションを同時に実行した場合でも、それぞれが他のトランザクションの影響を受けずに独立して実行されているように見えることを保証します。
      - Durability (永続性): 正常に完了したトランザクションの結果は、システム障害が発生しても失われないことを保証します。
    tags: [db, rdb, transaction, consistency]
    notes:
      - "リレーショナルデータベースの多くがACIDトランザクションをサポートしている"
      - "独立性のレベル（Isolation Level）には複数の段階がある（例: READ COMMITTED, REPEATABLE READ, SERIALIZABLE）"
      - "NoSQLデータベースの中には、パフォーマンスや可用性のために一部の特性を緩和しているものもある"
    url:
      - "https://en.wikipedia.org/wiki/ACID"

  - id: database-indexing
    term:
      ja: "データベースインデックス"
      en: "Database Index"
    definition: "データベースのテーブルから特定のデータを高速に検索するためのデータ構造です。"
    explanation: |
      インデックスは、書籍の索引のように、テーブル内の特定の列の値をキーとして、その値を持つ行の物理的な位置（ポインタ）を保持します。
      インデックスがない場合、特定のデータを見つけるにはテーブル全体をスキャン（フルテーブルスキャン）する必要がありますが、
      インデックスを利用することで、検索対象を大幅に絞り込み、クエリのパフォーマンスを劇的に向上させることができます。
      一方で、インデックスは追加のストレージ容量を必要とし、データの書き込み（INSERT, UPDATE, DELETE）時には
      インデックスの更新も必要になるため、書き込み性能がわずかに低下するトレードオフがあります。
    tags: [db, rdb, performance]
    notes:
      - "B-Treeインデックスが最も一般的だが、ハッシュインデックス、全文検索インデックス、空間インデックスなど様々な種類がある"
      - "どの列にインデックスを作成するかの設計（インデックス戦略）がパフォーマンスチューニングの鍵となる"
      - "書き込みが多いテーブルでは、インデックスの数を最小限に抑えることが重要"
    url:
      - "https://en.wikipedia.org/wiki/Database_index"