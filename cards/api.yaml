meta:
  deck:
    ja: "SDI API"
    en: "SDI API"
  lang: "ja"
cards:
  - id: idempotency
    term:
      ja: "冪等性"
      en: "Idempotency"
    definition: "冪等性とは、同じ操作を複数回実行しても、システムの状態が初回実行時と変わらない特性です。"
    recall_question: "同じ操作を複数回実行しても、システムの状態が初回実行時と変わらない特性を何と呼びますか？"
    explanation: |
      冪等性とは、ある操作を複数回実行しても、システムの状態が初回実行時と変わらない特性を指します。
      分散システムやネットワーク通信において、リクエストの再送（リトライ）は頻繁に発生するため、冪等性は非常に重要です。
      例えば、決済処理で冪等性が保証されていないと、リトライによって二重決済が発生する可能性があります。
      HTTPメソッドではGET、PUT、DELETEは冪等ですが、POSTは通常冪等ではありません。
      冪等性を実現するためには、リクエストIDの利用や、状態遷移のチェックなどの工夫が必要です。
    tags: [api, reliability, distributed]
    notes:
      - "リトライセーフなAPI設計に不可欠"
      - "GET, PUT, DELETEは通常冪等、POSTは通常冪等ではない"
      - "リクエストID（冪等キー）を付与して、サーバー側で重複リクエストを検出・無視する"
      - "分散システムにおける信頼性向上に貢献"
    url:
      - "https://en.wikipedia.org/wiki/Idempotence"

  - id: api-gateway
    term:
      ja: "API Gateway"
      en: "API Gateway"
    definition: "API Gatewayは、マイクロサービスへの単一のエントリポイントを提供し、ルーティング、認証、レート制限などを集約するサーバーです。"
    explanation: |
      API Gatewayは、クライアントからのリクエストを複数のマイクロサービスにルーティングする単一のエントリポイントとして機能します。
      これにより、クライアントは個々のマイクロサービスの複雑さを意識することなく、API Gatewayとだけ通信すればよくなります。
      API Gatewayは、リクエストのルーティング、認証・認可、レート制限、ロギング、モニタリング、キャッシュ、レスポンス変換など、様々な横断的関心事を集約して処理します。
      これにより、マイクロサービス自体はビジネスロジックに集中でき、開発効率と運用性が向上します。
    tags: [api, microservices, architecture]
    notes:
      - "マイクロサービスアーキテクチャにおける単一のエントリポイント"
      - "認証・認可、レート制限、ロギングなどの横断的関心事を集約"
      - "クライアントとマイクロサービスの疎結合を実現"
      - "代表的な実装例: Nginx, Kong, Amazon API Gateway, Google Cloud Endpoints"
    url:
      - "https://microservices.io/patterns/apigateway.html"

  - id: restful-api
    term:
      ja: "RESTful API"
      en: "RESTful API"
    definition: "Webの標準技術（HTTP, URIなど）を用いて、リソース指向で設計されたAPIのスタイルです。"
    explanation: |
      REST (Representational State Transfer) は、Webサービスの設計原則の集合であり、RESTful APIはその原則に従って構築されたAPIです。
      HTTPメソッド（GET, POST, PUT, DELETEなど）をリソースに対する操作として使用し、URIでリソースを一意に識別します。
      ステートレスであること、キャッシュ可能であること、統一インターフェースを持つことなどが特徴です。
      シンプルで理解しやすく、Webブラウザとの親和性が高いため、広く普及しています。
    tags: [api, web, architecture]
    notes:
      - "HTTPメソッドとURIを適切に利用する"
      - "ステートレスであるため、サーバー側の負荷が軽減される"
      - "キャッシュを活用し、パフォーマンスを向上できる"
      - "マイクロサービス間の通信や、Webアプリケーションのバックエンドとして広く利用される"
    url:
      - "https://en.wikipedia.org/wiki/Representational_state_transfer"

  - id: grpc
    term:
      ja: "gRPC"
      en: "gRPC"
    definition: "Googleが開発した、Protocol Buffersをインターフェース定義言語とし、HTTP/2をトランスポート層に利用する高性能なRPC（Remote Procedure Call）フレームワークです。"
    explanation: |
      gRPCは、クライアントとサーバー間でメソッドを直接呼び出すかのように通信できるRPCフレームワークです。
      Protocol Buffers（Protocol Buffers）でサービスとメッセージのスキーマを定義し、
      HTTP/2の多重化、ストリーム、ヘッダー圧縮などの機能を利用することで、
      高いパフォーマンスと効率的な通信を実現します。
      多言語対応、双方向ストリーミング、認証などの機能も標準で提供されており、
      マイクロサービス間の通信や、モバイル・IoTデバイスとの連携に適しています。
    tags: [api, rpc, microservices, network]
    notes:
      - "Protocol Buffersによる厳密なスキーマ定義"
      - "HTTP/2による高性能な通信（多重化、ヘッダー圧縮、ストリーミング）"
      - "多言語対応で、異なる言語間のサービス連携が容易"
      - "マイクロサービス間の内部通信や、モバイルアプリのバックエンド通信に利用される"
    url:
      - "https://grpc.io/"
