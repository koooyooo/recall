meta:
  deck:
    ja: "SDI SRE"
    en: "SDI SRE"
  lang: "ja"
cards:
  - id: percentiles
    term:
      ja: "p50 / p95 / p99"
      en: "p50 / p95 / p99"
    definition: "p50 / p95 / p99は、レイテンシ分布の百分位点です。"
    explanation: |
      パーセンタイルは、測定値の分布を理解するために使われる統計的な指標です。
      例えば、p95レイテンシが100msであるとは、「リクエストの95%が100ms以内に完了し、残りの5%はそれより時間がかかった」ことを意味します。
      平均値だけでは見えない外れ値（テールレイテンシ）の影響を把握し、ユーザー体験の悪化を検知するために重要です。
      特に、ユーザー体験の品質を測る上で、平均値よりもパーセンタイル値が重視されます。
    tags: [sre, latency]
    notes:
      - "p50は中央値（Median）"
      - "p99.9など、より厳しいテールを見ることもある"
      - "平均値は外れ値に引っ張られやすいため、ユーザー体験を正確に反映しない場合がある"
      - "テールレイテンシ（p99, p99.9など）は、ごく一部のユーザーが経験する最悪の体験を示す"

  - id: slo-sli-sla
    term:
      ja: "SLO / SLI / SLA"
      en: "SLO / SLI / SLA"
    definition: "SLO / SLI / SLAは、目標、指標、契約です。"
    explanation: |
      SLI (Service Level Indicator)は、サービスのパフォーマンスを測定するための具体的な指標（例：リクエストの成功率、p95レイテンシ）。
      SLO (Service Level Objective)は、SLIに対する内部的な目標値（例：成功率99.9%）。
      SLA (Service Level Agreement)は、SLO未達の場合のペナルティなどを含む、顧客との法的な契約です。
      SREプラクティスでは、野心的なSLOを設定し、それをエラーバジェットの算出基準とします。
      これらの概念は、サービスの信頼性を管理し、ユーザー体験を向上させるために不可欠です。
    tags: [sre]
    notes:
      - "SLIはユーザー体験を反映する指標を選ぶことが重要"
      - "SLOは内部的な目標であり、SLAは顧客との合意"
      - "エラーバジェットはSLOから導出され、開発速度と信頼性のバランスを取るための指標となる"
      - "Google SREのプラクティスで広く提唱されている概念"

  - id: error-budget
    term:
      ja: "エラーバジェット"
      en: "Error Budget"
    definition: "エラーバジェットは、SLOから逆算した\u201c失敗許容量\u201dです。"
    explanation: |
      エラーバジェットは `100% - SLO(%)` で計算される、許容されるエラーの量です。
      例えばSLOが99.9%なら、エラーバジェットは0.1%です。
      このバジェットを期間内に使い切ってしまうと、信頼性向上のために機能リリースを一時的に凍結するなどのルールを設けることで、
      開発速度と信頼性のバランスを取ります。
      エラーバジェットの燃焼速度（Burndown Rate）を監視することは、早期警告に繋がり、問題発生時の迅速な対応を可能にします。
    tags: [sre]
    notes:
      - "バジェットの燃焼速度（Burndown Rate）を監視することが、早期警告に繋がる"
      - "エラーバジェットを使い切ると、信頼性向上のための活動が優先される"
      - "開発チームと運用チーム間の共通言語となる"
      - "SLO達成のためのインセンティブとしても機能する"

  - id: circuit-breaker
    term:
      ja: "サーキットブレーカー"
      en: "Circuit Breaker"
    definition: "外部サービスへの呼び出しを監視し、障害が続く場合に自動的に呼び出しを停止（トリップ）して、連鎖的な障害を防ぐパターンです。"
    explanation: |
      サーキットブレーカーは、電気回路のブレーカーのように動作し、3つの状態（Closed, Open, Half-Open）を持ちます。
      - Closed: 通常状態で、リクエストは外部サービスに送られます。エラー率が閾値を超えるとOpen状態に移行します。
      - Open: 外部サービスへのリクエストを即座に失敗させ、負荷をかけないようにします。一定時間が経過するとHalf-Open状態に移行します。
      - Half-Open: 少数のリクエストを外部サービスに送って、障害が回復したかどうかを試します。成功すればClosedに、失敗すれば再びOpenに戻ります。
    tags: [sre, reliability, architecture, distributed]
    notes:
      - "マイクロサービスアーキテクチャにおける連鎖障害（カスケード障害）を防ぐために不可欠なパターン"
      - "リクエストを即座に失敗させることで、クライアントの応答性を向上させる（フェイルファスト）"
      - "外部サービスの回復を自動的に検知できる"
      - "代表的な実装ライブラリ: Hystrix, Resilience4j, Polly"
    url:
      - "https://microservices.io/patterns/reliability/circuit-breaker.html"

  - id: mttr
    term:
      ja: "MTTR (平均修復時間)"
      en: "MTTR (Mean Time To Recovery)"
    definition: "システム障害が発生してから、完全に修復されるまでの平均時間です。"
    explanation: |
      MTTRは、システムの信頼性と保守性を示す重要な指標です。
      障害の検知、診断、修正、そしてシステムの正常な稼働状態への復帰までの一連のプロセスにかかる時間を含みます。
      SREプラクティスにおいて、MTTRを短縮することは、サービスの可用性を高め、ユーザーへの影響を最小限に抑える上で極めて重要ですす。
      MTTRを改善するためには、効果的な監視、迅速なアラート、自動化された復旧プロセス（自動フェイルオーバーなど）、
      そして明確なインシデント対応手順などが求められます。
    tags: [sre, reliability, monitoring]
    notes:
      - "MTTR = 障害検知時間 + 診断時間 + 修復時間 + 検証時間"
      - "MTBF (Mean Time Between Failures, 平均故障間隔) と合わせて、システムの全体的な信頼性を評価するために使われる"
      - "MTTRの短縮は、SLO（サービスレベル目標）を達成するための重要な要素"
    url:
      - "https://en.wikipedia.org/wiki/Mean_time_to_recovery"